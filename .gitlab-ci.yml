default:
  tags:
    - Fulen

stages:          # List of stages for jobs, and their order of execution
  - build_images
  - deploy_dev
  - cleanup_dev_deployment
  - tag_release
  - deploy_tds
  - cleanup_dev_images

build_images:
  stage: build_images
  rules:
    - if: '$CI_COMMIT_TAG =~ /^prod-v?[0-9]+[.][0-9]+([.][0-9]+)?$/ || $CI_COMMIT_TAG =~ /^tds-v?[0-9]+[.][0-9]+([.][0-9]+)?$/ || $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH =~ /^RESTAPI-.{10,}$/'
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - wget https://releases.hashicorp.com/vault/1.11.0/vault_1.11.0_linux_amd64.zip
    - unzip vault_1.11.0_linux_amd64.zip
    - export PATH=$PATH:$(pwd)
    - export VAULT_ADDR="https://vault.svc.cscs.ch"
    - export VAULT_TOKEN=$CI_VAULT_TOKEN
    - CI_K8S_TOKEN="$(vault kv get -field=firecrest-cicd-secret firecrest/dev)"
    - CI_REGISTRY_GROUP="$(vault kv get -field=REGISTRY_GROUP firecrest/dev)"
    - CI_REGISTRY_PREFIX="$(vault kv get -field=REPO_PREFIX firecrest/dev)"

    - mkdir -p /kaniko/.docker
    - echo '{"auths":{"'$CI_REGISTRY'":{"username":"'$CI_REGISTRY_USER'","password":"'$CI_REGISTRY_PASSWORD'"}}}' > /kaniko/.docker/config.json
    - |
        

        # Core microservices
        for img in compute reservations status storage tasks utilities; do
            /kaniko/executor --build-arg BASE_IMAGE=${CI_REGISTRY_PREFIX}/f7t-base:latest --registry-mirror ${CI_REGISTRY} \
            --context ./ --dockerfile deploy/docker/$img/Dockerfile --destination ${CI_REGISTRY_PREFIX}/$img:${CI_COMMIT_SHORT_SHA} --cleanup
        done
        
        if [ "$CI_COMMIT_TAG" != "" ]; then exit 0; fi

        # Certificator separated since its base image is different (centos:7)
        /kaniko/executor --context ./ --dockerfile "deploy/docker/certificator/Dockerfile" \
            --destination "${CI_REGISTRY_PREFIX}/certificator:${CI_COMMIT_SHORT_SHA}" --cleanup

        # build web client
        /kaniko/executor --context src/tests/template_client --dockerfile ./Dockerfile \
        --destination ${CI_REGISTRY_PREFIX}/client:${CI_COMMIT_SHORT_SHA} --cleanup

        # build tester
        /kaniko/executor --context ./ --dockerfile deploy/docker/tester/Dockerfile \
        --destination ${CI_REGISTRY_PREFIX}/tester:${CI_COMMIT_SHORT_SHA} --cleanup
        
  

deploy_dev:
  variables:
    CI_NAMESPACE_DEV: firecrest-dev
    DOCKER_AUTH_CONFIG: '{"auths":{"${CI_REGISTRY}":{"username":"${CI_REGISTRY_USER}","password":"${CI_REGISTRY_PASSWORD}"}}}'
  stage: deploy_dev
  needs:
    - job: build_images
  image:
    name: ${CI_REGISTRY_PREFIX}/ci-util:latest
  script:
    - echo "Deploy development environment"
    - export VAULT_ADDR="https://vault.svc.cscs.ch"
    - export VAULT_TOKEN=$CI_VAULT_TOKEN
    - CI_K8S_TOKEN="$(vault kv get -field=firecrest-cicd-secret firecrest/dev)"
    - CI_REGISTRY_GROUP="$(vault kv get -field=REGISTRY_GROUP firecrest/dev)"
    - CI_REGISTRY_PREFIX="$(vault kv get -field=REPO_PREFIX firecrest/dev)"
    - |
        printf 'Waiting for other pipelines...'
        ELEVATED_TOKEN="$(vault kv get -field=GITLAB_ACCESS_TOKEN firecrest/dev)"
        GITLAB_HOST="https://gitlab.cscs.ch"
        CI_PROJECT_ID=1261
        while true; do
          READY=$(curl -sS --header "PRIVATE-TOKEN: ${ELEVATED_TOKEN}" "${GITLAB_HOST}/api/v4/projects/${CI_PROJECT_ID}/pipelines?order_by=id&sort=asc&scope=running" | jq '.[0].id=='"${CI_PIPELINE_ID}")
          if [ "${READY}" = "true" ]; then
            printf '\nReady!'
            break
          else
            printf '.'
            sleep 10
          fi
        done
    - helm list -n ${CI_NAMESPACE_DEV} --kube-token=${CI_K8S_TOKEN}

    - cd deploy/k8s
    - ls -la
    - >
      echo -e "registry: ${CI_REGISTRY_PREFIX}\ntag: '${CI_COMMIT_SHORT_SHA}' \nnamespace: ${CI_NAMESPACE_DEV}\nregistry_secret_creds: regcred\n" > values-dev.yaml

      for app in config certificator client compute jaeger keycloak kong minio openapi reservations status storage tasks utilities; do
        helm uninstall -n ${CI_NAMESPACE_DEV} --kube-token=${CI_K8S_TOKEN} "$app" || true
        helm install  --wait --wait-for-jobs --timeout 180s -n ${CI_NAMESPACE_DEV} -f values-dev.yaml --kube-token=${CI_K8S_TOKEN} "$app" $app;
      done
    # Cluster is deployed separatelly ALWAYS with tag = latest
    - >
      echo -e "registry: ${CI_REGISTRY_PREFIX}\ntag: latest \nnamespace: ${CI_NAMESPACE_DEV}\nregistry_secret_creds: regcred\n" > values-cluster-dev.yaml;

      helm uninstall -n ${CI_NAMESPACE_DEV} --kube-token=${CI_K8S_TOKEN} cluster || true;
      helm install --wait --wait-for-jobs --timeout 180s -n ${CI_NAMESPACE_DEV} -f values-cluster-dev.yaml --kube-token=${CI_K8S_TOKEN} cluster cluster;

      helm list -n ${CI_NAMESPACE_DEV} --kube-token=${CI_K8S_TOKEN};

      kubectl get pods -n ${CI_NAMESPACE_DEV} --token=${CI_K8S_TOKEN};

    # Testing

    - >
      for use_gateway in False True; do

        helm uninstall -n ${CI_NAMESPACE_DEV} --kube-token=${CI_K8S_TOKEN} tester && sleep 15s || true;

        echo -e "Test using gateway: $use_gateway";

        helm install --wait --timeout 120s  -n $CI_NAMESPACE_DEV  -f values-dev.yaml \
            --set tag=$CI_COMMIT_SHORT_SHA \
            --set workingDir="/firecrest/src/tests/automated_tests" \
            --set use_gateway="$use_gateway" \
            --set pytest_config_file="firecrest-dev.ini" --kube-token=${CI_K8S_TOKEN} \
            tester tester;

        cont_exitcode=0;

        while :
        do
            sleep 20s;

            tester_pod=$(kubectl get pods --selector=job-name=job-tester -n ${CI_NAMESPACE_DEV} --token="${CI_K8S_TOKEN}" --output=jsonpath='{.items[*].metadata.name}');

            echo "Tester pod is: $tester_pod";

            pdstatus=$(kubectl get pods -n ${CI_NAMESPACE_DEV} --token="${CI_K8S_TOKEN}" $tester_pod -o jsonpath="{.status.phase}");

            if [ "$pdstatus" = "Running" ] || [ "$pdstatus" = "Pending" ]; then
                cont_exitcode=$(kubectl get pods -n ${CI_NAMESPACE_DEV} --token="${CI_K8S_TOKEN}" --selector=app=tester -o jsonpath="{.items[*].status.containerStatuses[1].state.terminated.exitCode}")

                if [ "$cont_exitcode" = "" ]; then echo "$tester_pod is still $pdstatus"; continue; fi

                cont_reason=$(kubectl get pods -n ${CI_NAMESPACE_DEV} --token="${CI_K8S_TOKEN}" --selector=app=tester -o jsonpath="{.items[*].status.containerStatuses[1].state.terminated.reason}")
                echo "Container tester exit code $cont_exitcode (reason: $cont_reason)";
            fi

            kubectl logs $tester_pod -n ${CI_NAMESPACE_DEV} --token="${CI_K8S_TOKEN}";

            if [ "$cont_exitcode" = "0" ]; then
                echo -e "$tester_pod success."; break;
              else
                echo -e "$tester_pod failed: $cont_exitcode"; exit 1;
            fi

          done
      done
  only:    
    - master
    - /^RESTAPI-.{10,}$/

  when: on_success

cleanup_dev_deployment:
  variables:
    CI_NAMESPACE_DEV: firecrest-dev
    DOCKER_AUTH_CONFIG: '{"auths":{"${CI_REGISTRY}":{"username":"${CI_REGISTRY_USER}","password":"${CI_REGISTRY_PASSWORD}"}}}'
  needs:
    - job: deploy_dev
  stage: cleanup_dev_deployment
  image:
    name: ${CI_REGISTRY_PREFIX}/ci-util:latest
  script:
    - export VAULT_ADDR="https://vault.svc.cscs.ch"
    - export VAULT_TOKEN=$CI_VAULT_TOKEN
    - CI_K8S_TOKEN="$(vault kv get -field=firecrest-cicd-secret firecrest/dev)"
    - CI_REGISTRY_GROUP="$(vault kv get -field=REGISTRY_GROUP firecrest/dev)"
    - CI_REGISTRY_PREFIX="$(vault kv get -field=REPO_PREFIX firecrest/dev)"
    - >
      for app in config certificator client compute jaeger keycloak kong minio openapi reservations status storage tasks utilities cluster tester; do
        helm uninstall -n ${CI_NAMESPACE_DEV} --kube-token=${CI_K8S_TOKEN} "$app" || true
      done
  only:    
    - master
    - /^RESTAPI-.{10,}$/
  when: on_success

tag_release:
  variables:
    DOCKER_AUTH_CONFIG: '{"auths":{"${CI_REGISTRY}":{"username":"${CI_REGISTRY_USER}","password":"${CI_REGISTRY_PASSWORD}"}}}'
  needs:
    - job: build_images
  stage: tag_release
  rules:
    - if: '$CI_COMMIT_TAG =~ /^prod-v?[0-9]+[.][0-9]+([.][0-9]+)?$/ || $CI_COMMIT_TAG =~ /^tds-v?[0-9]+[.][0-9]+([.][0-9]+)?$/'
  image:
    name: ${CI_REGISTRY_PREFIX}/ci-util:latest
  script:
    - export VAULT_ADDR="https://vault.svc.cscs.ch"
    - export VAULT_TOKEN=$CI_VAULT_TOKEN
    - GITLAB_ACCESS_TOKEN="$(vault kv get -field=GITLAB_ACCESS_TOKEN firecrest/dev)"
    - CI_REGISTRY_GROUP="$(vault kv get -field=REGISTRY_GROUP firecrest/dev)"    
    
    - |  
        branch=$(curl -sS --header "PRIVATE-TOKEN: ${GITLAB_ACCESS_TOKEN}" "${CI_SERVER_URL}/api/v4/projects/${CI_PROJECT_ID}/repository/commits/${CI_COMMIT_SHORT_SHA}/refs?type=branch" | jq '.[].name=="master"')

        env_tags="tds"    
        if [ "$branch" == "true" ]; then

          if [ "${CI_COMMIT_TAG:0:4}" == "prod" ]; then
            env_tags="$CI_COMMIT_TAG prod"
          fi
          for tag in $env_tags; do
            images="compute reservations status storage tasks utilities";
            for img in $images; do
                jfrog rt copy --flat=true --url="https://${CI_REGISTRY}/artifactory" --user="${CI_REGISTRY_USER}" --password="${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY_GROUP}/$image/${CI_COMMIT_SHORT_SHA}/" "${CI_REGISTRY_GROUP}/$img/$tag/";  
            done
          done

        else
          echo "The tag does not belong to master the branch";
          exit 0
        fi

  when: on_success
        


cleanup_dev_images:
  variables:
    DOCKER_AUTH_CONFIG: '{"auths":{"${CI_REGISTRY}":{"username":"${CI_REGISTRY_USER}","password":"${CI_REGISTRY_PASSWORD}"}}}'
  stage: cleanup_dev_images
  rules:
    - if: '$CI_COMMIT_TAG =~ /^prod-v?[0-9]+[.][0-9]+([.][0-9]+)?$/ || $CI_COMMIT_TAG =~ /^tds-v?[0-9]+[.][0-9]+([.][0-9]+)?$/ || $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH =~ /^RESTAPI-.{10,}$/'
  image:
    name: ${CI_REGISTRY_PREFIX}/ci-util:latest
  script:
    - export VAULT_ADDR="https://vault.svc.cscs.ch"
    - export VAULT_TOKEN=$CI_VAULT_TOKEN
    - CI_REGISTRY_GROUP="$(vault kv get -field=REGISTRY_GROUP firecrest/dev)"
    - CI_REGISTRY_PREFIX="$(vault kv get -field=REPO_PREFIX firecrest/dev)"
    - >
      for image in certificator client compute reservations status storage tasks tester utilities; do

        jfrog rt del --recursive --quiet --url="https://${CI_REGISTRY}/artifactory" --user="${CI_REGISTRY_USER}" --password="${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY_GROUP}/$image/${CI_COMMIT_SHORT_SHA}/"

      done  
  when: on_success