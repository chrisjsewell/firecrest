def vault_secrets = [
                [path: 'firecrest/dev', engineVersion: 2, secretValues: [
                        [envVar: 'JFROG_API_KEY', vaultKey: 'JFROG_API_KEY'],
                        [envVar: 'REGISTRY', vaultKey: 'REGISTRY'],
                        [envVar: 'REGISTRY_GROUP', vaultKey: 'REGISTRY_GROUP'],
                        [envVar: 'REGISTRY_USER', vaultKey: 'REGISTRY_USER'],
                        [envVar: 'REPO_PREFIX', vaultKey: 'REPO_PREFIX'],
                        [envVar: 'K8S_CLUSTER_URL', vaultKey: 'K8S_CLUSTER_URL'],
                        [envVar: 'firecrestci_github_access_token', vaultKey: 'firecrestci_github_access_token'],
                    ]
                ],
            ]

def vault_config = [timeout: 10, skipSslVerification: true]



pipeline {
    agent {
        kubernetes {
            //label 'kaniko'
            yaml """
kind: Pod
metadata:
  name: kaniko
spec:
  containers:
  - name: kaniko
    image: gcr.io/kaniko-project/executor:debug
    imagePullPolicy: Always
    command:
    - /busybox/cat
    tty: true
"""
        }
    }
    environment {
        DEPLOY_NAMESPACE = "firecrest-dev"
        TDS_NAMESPACE = "firecrest-tds"
        GIT_COMMIT = "${env.GIT_COMMIT}"
        GIT_COMMIT_SHORT = "${env.GIT_COMMIT.take(7)}"
    }

    stages {
        stage("Kaniko Config") {

            steps {
                container(name: 'kaniko') {
                    withVault([vaultSecrets: vault_secrets, configuration: vault_config]) {

                        sh '''
                            mkdir -p /kaniko/.docker
                            echo '{"auths":{"'$REGISTRY'":{"username":"'$REGISTRY_USER'","password":"'$JFROG_API_KEY'"}}}' > /kaniko/.docker/config.json
                        '''
                }
            }
          }
        }

        stage("Kaniko Build & Push to registry") {
            steps {
                container(name: 'kaniko') {
                    withVault([vaultSecrets: vault_secrets, configuration: vault_config]) {

                        sh '''
                            #cd ${BUILD_NUMBER}/firecrest
                            pwd
                            ls -la

                            # build microservices
                            # Certificator separated since its base image is different (centos:7)
                            /kaniko/executor --context ./ --dockerfile deploy/docker/certificator/Dockerfile \
                                --destination $REPO_PREFIX/certificator:$GIT_COMMIT_SHORT --cleanup

                            # Rest of the microservices
                            for ms in compute reservations status storage tasks utilities; do
                                /kaniko/executor --build-arg BASE_IMAGE=$REPO_PREFIX/f7t-base:latest --registry-mirror $REGISTRY \
                                --context ./ --dockerfile deploy/docker/$ms/Dockerfile --destination $REPO_PREFIX/$ms:$GIT_COMMIT_SHORT --cleanup
                            done

                            # build web client
                            /kaniko/executor --context src/tests/template_client --dockerfile ./Dockerfile \
                            --destination $REPO_PREFIX/client:$GIT_COMMIT_SHORT --cleanup

                            # build tester
                            /kaniko/executor --context ./ --dockerfile deploy/docker/tester/Dockerfile \
                            --destination $REPO_PREFIX/tester:$GIT_COMMIT_SHORT --cleanup
                        '''
                    }
                }
            }
        }

        stage("F7T+Infra Pods Deployment") {
            steps {
                withVault([vaultSecrets: vault_secrets, configuration: vault_config]) {
                    withKubeConfig([credentialsId: 'firecrest-cicd-secret', serverUrl: K8S_CLUSTER_URL]) {
                        sh '''
                            curl -s -O https://get.helm.sh/helm-v3.7.1-linux-amd64.tar.gz
                            tar -xvf helm-v3.7.1-linux-amd64.tar.gz

                            export PATH=$PATH:$(pwd)/linux-amd64
                            helm list -n "$DEPLOY_NAMESPACE"

                            cd deploy/k8s
                            ls -la
                            echo "registry: $REPO_PREFIX\ntag: '$GIT_COMMIT_SHORT'\nnamespace: "$DEPLOY_NAMESPACE"\nregistry_secret_creds: registry-credentials\n" > values-dev.yaml

                            for app in config certificator client compute jaeger keycloak kong minio openapi reservations status storage tasks utilities; do
                              helm uninstall "$app-env-dev" -n "$DEPLOY_NAMESPACE" || true
                              helm install  --wait --wait-for-jobs --timeout 60s  "$app-env-dev" $app -n "$DEPLOY_NAMESPACE"  -f values-dev.yaml
                            done
                            helm ls -n "$DEPLOY_NAMESPACE"
                        '''
                    }

                }
            }
        }
        stage("Cluster Pod Deployment For Microservices Tests") {
            steps {
                withVault([vaultSecrets: vault_secrets, configuration: vault_config]) {
                    withKubeConfig([credentialsId: 'firecrest-cicd-secret', serverUrl: K8S_CLUSTER_URL]) {

                        sh '''
                            curl -s -O https://get.helm.sh/helm-v3.7.1-linux-amd64.tar.gz
                            tar -xvf helm-v3.7.1-linux-amd64.tar.gz
                            export PATH=$PATH:$(pwd)/linux-amd64
                            helm list -n "$DEPLOY_NAMESPACE"

                            cd deploy/k8s
                            ls -la

                            # Cluster is deployed separatelly ALWAYS with tag = tds

                            echo "registry: $REPO_PREFIX\ntag: latest \nnamespace: "$DEPLOY_NAMESPACE"\nregistry_secret_creds: registry-credentials\n" > values-cluster-dev.yaml

                            helm uninstall cluster-env-dev -n "$DEPLOY_NAMESPACE" || true
                            helm install --wait --timeout 60s  cluster-env-dev cluster -n "$DEPLOY_NAMESPACE"  -f values-cluster-dev.yaml

                            helm ls -n "$DEPLOY_NAMESPACE"
                        '''
                    }
                }
            }
        }

        stage("Performing Microservices Tests") {
            steps {
                withVault([vaultSecrets: vault_secrets, configuration: vault_config]) {
                    withKubeConfig([credentialsId: 'firecrest-cicd-secret', serverUrl: K8S_CLUSTER_URL]) {
                        sh '''
                            # installing helm
                            curl -s -O https://get.helm.sh/helm-v3.7.1-linux-amd64.tar.gz
                            tar -xvf helm-v3.7.1-linux-amd64.tar.gz
                            export PATH=$PATH:$(pwd)/linux-amd64

                            # installing kubectl
                            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                            chmod +x kubectl
                            export PATH=$PATH:$(pwd)

                            helm list -n "$DEPLOY_NAMESPACE"
                            kubectl get pods -n "$DEPLOY_NAMESPACE"

                            cd deploy/k8s
                            ls -la
                            echo "registry: $REPO_PREFIX\ntag: '$GIT_COMMIT_SHORT'\nnamespace: "$DEPLOY_NAMESPACE"\nregistry_secret_creds: registry-credentials\n" > values-dev.yaml

                            for use_gateway in True False; do

                                helm uninstall tester-env-dev -n "$DEPLOY_NAMESPACE" && sleep 15s || true

                                echo "Test using gateway: $use_gateway"
                                helm install --wait --timeout 120s tester-env-dev tester -n "$DEPLOY_NAMESPACE"  -f values-dev.yaml --set tag=$GIT_COMMIT_SHORT \
                                    --set workingDir="/firecrest/src/tests/automated_tests" \
                                    --set use_gateway="$use_gateway" \
                                    --set pytest_config_file="firecrest-dev.ini"

                                cont_exitcode=0

                                while :
                                do
                                    sleep 20s

                                    tester_pod=$(kubectl get pods --selector=job-name=job-tester -n "$DEPLOY_NAMESPACE" --output=jsonpath='{.items[*].metadata.name}')
                                    echo "Tester pod is: $tester_pod"
                                    pdstatus=$(kubectl get pods -n "$DEPLOY_NAMESPACE" $tester_pod -o jsonpath="{.status.phase}")

                                    if [ "$pdstatus" = "Running" ] || [ "$pdstatus" = "Pending" ]; then
                                        cont_exitcode=$(kubectl get pods -n "$DEPLOY_NAMESPACE"  --selector=app=tester -o jsonpath="{.items[*].status.containerStatuses[1].state.terminated.exitCode}")

                                        if [ "$cont_exitcode" = "" ]; then echo "$tester_pod is still $pdstatus"; continue; fi

                                        cont_reason=$(kubectl get pods -n "$DEPLOY_NAMESPACE"  --selector=app=tester -o jsonpath="{.items[*].status.containerStatuses[1].state.terminated.reason}")
                                        echo "Container tester exit code $cont_exitcode (reason: $cont_reason)";
                                    fi

                                    kubectl logs $tester_pod -n firecrest-dev
                                    if [ "$cont_exitcode" = "0" ]; then
                                        echo "$tester_pod success."; break;
                                     else
                                        echo "$tester_pod failed: $cont_exitcode"; exit 1;
                                    fi
                                done
                            done
                        '''
                    }
                }
            }
        }
        stage('TDS environment deployment'){
            when {
                branch 'dev'
            }
            steps {
                withVault([vaultSecrets: vault_secrets, configuration: vault_config]) {
                    withKubeConfig([credentialsId: 'firecrest-cicd-secret', serverUrl: K8S_CLUSTER_URL]) {
                        sh  '''

                            # Download jfrog CLI
                            curl -fL https://getcli.jfrog.io | sh

                            tag="tds"

                            for ms in certificator client compute reservations status storage tasks utilities; do
                                ./jfrog rt copy --flat=true --url="https://$REGISTRY/artifactory" --user="$REGISTRY_USER" --password="$JFROG_API_KEY" "$REGISTRY_GROUP/$ms/$GIT_COMMIT_SHORT/" "$REGISTRY_GROUP/$ms/$tag/"
                            done
                        '''

                        sh '''
                            # Deploy TDS openapi server in firecrest-tds

                            # Install helm
                            curl -s -O https://get.helm.sh/helm-v3.7.1-linux-amd64.tar.gz
                            tar -xvf helm-v3.7.1-linux-amd64.tar.gz
                            pwd
                            export PATH=$PATH:$(pwd)/linux-amd64

                            # removing old openapi (if exists)
                            helm uninstall "openapi-env-tds" -n "$TDS_NAMESPACE" || true

                            # create new openapi
                            cd deploy/k8s
                            ls -la

                            echo "registry: $REPO_PREFIX\ntag: tds\nnamespace: "$TDS_NAMESPACE"\nregistry_secret_creds: registry-credentials\n" > values-tds.yaml

                            helm install --wait --timeout 60s openapi-env-tds openapi -n "$TDS_NAMESPACE" -f values-tds.yaml

                        '''
                    }
                }

            }
        }

    }
    post{
        always {
            withVault([vaultSecrets: vault_secrets, configuration: vault_config]){
                withKubeConfig([credentialsId: 'firecrest-cicd-secret', serverUrl: K8S_CLUSTER_URL]) {
                    sh '''
                        # installing kubectl
                        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                        chmod +x kubectl
                        export PATH=$PATH:$(pwd)

                        # install helm
                        curl -s -O https://get.helm.sh/helm-v3.7.1-linux-amd64.tar.gz
                        tar -xvf helm-v3.7.1-linux-amd64.tar.gz
                        pwd
                        export PATH=$PATH:$(pwd)/linux-amd64

                        # getting logs from all pods
                        pods=$(kubectl get pods -n "$DEPLOY_NAMESPACE" --output=jsonpath='{.items[*].metadata.name}' --selector=app!=tester)

                        for pod in $pods; do
                            kubectl logs $pod -n "$DEPLOY_NAMESPACE"  --all-containers=true || true
                        done

                        # removing infrastructure
                        for app in config certificator client cluster compute jaeger keycloak kong minio openapi reservations status storage tasks tester utilities; do
                            helm uninstall "$app-env-dev" -n "$DEPLOY_NAMESPACE" || true
                        done

                        # Download jfrog CLI
                        curl -fL https://getcli.jfrog.io | sh

                        # remove images
                        for ms in certificator client compute reservations status storage tasks tester utilities; do
                            ./jfrog rt del --recursive --quiet --url="https://$REGISTRY/artifactory" --user="$REGISTRY_USER" --password="$JFROG_API_KEY" "$REGISTRY_GROUP/$ms/$GIT_COMMIT_SHORT/"
                        done
                    '''
                }
            }
        }
        success {
            script {
                // Notify Github on success
                withVault([vaultSecrets: vault_secrets, configuration: vault_config]){
                    sh 'curl -H "Authorization: token ' + "${firecrestci_github_access_token}"  + '" "https://api.github.com/repos/eth-cscs/firecrest/statuses/' + "${env.GIT_COMMIT}" + '" \\' +
                    '-H "Content-Type: application/json" \\' +
                    '-X POST \\' +
                    '-d "{\\"state\\": \\"success\\",\\"context\\": \\"continuous-integration/jenkins\\", \\"description\\": \\"Jenkins\\", \\"target_url\\": \\"' + "${env.BUILD_URL}" + '/console\\"}"'
                }
            }
            slackSend (message: "Feature branch: ${env.BRANCH_NAME} -> ${env.BUILD_DISPLAY_NAME} successful - details: ${env.BUILD_URL}", color: "good")
        }
        unsuccessful{
            script {
                // Notify Github on failure
                withVault([vaultSecrets: vault_secrets, configuration: vault_config]){
                    sh 'curl -H "Authorization: token ' + "${firecrestci_github_access_token}"  + '" "https://api.github.com/repos/eth-cscs/firecrest/statuses/' + "${env.GIT_COMMIT}" + '" \\' +
                    '-H "Content-Type: application/json" \\' +
                    '-X POST \\' +
                    '-d "{\\"state\\": \\"failure\\",\\"context\\": \\"continuous-integration/jenkins\\", \\"description\\": \\"Jenkins\\", \\"target_url\\": \\"' + "${env.BUILD_URL}" + '/console\\"}"'
                }
            }
            slackSend (message: "Feature branch: ${env.BRANCH_NAME} -> ${env.BUILD_DISPLAY_NAME} failed - details: ${env.BUILD_URL}",  color: "danger")
        }
    }
}
